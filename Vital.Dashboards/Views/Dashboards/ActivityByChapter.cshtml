@*
    Project VITAL.Dashboard
    Copyright (C) 2017 - Universiteit Hasselt
    This project has been funded with support from the European Commission (Project number: 2015-BE02-KA203-012317). 

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*@


@{
    ViewBag.Title = "ActivityByChapter";
    ViewBag.RequireD3 = true;
    ViewBag.InstanceId = Guid.NewGuid().ToString().Replace("-", "");
    ViewBag.Key = ViewBag.Title + "_" + ViewBag.InstanceId;

    ViewBag.Width = (this.Model != null && this.Model.ContainsKey("width")) ? this.Model["width"] : 960;
    ViewBag.Height = (this.Model != null && this.Model.ContainsKey("height")) ? this.Model["height"] : 400;
    ViewBag.IsStandalone = (this.Model == null);
}

@if(ViewBag.IsStandalone)
{
    Html.RenderPartial("~/Views/Shared/_PartialPage_GlobalRebuildScript.cshtml");
    
    @*<div class="block-container filter">
        <select id="x_courseInstanceSelect"></select>
        <select id="x_studentSelect"></select>
        <select id="x_verbSelect"></select>
    </div>
    <br />*@
}

<div class="@((ViewBag.IsStandalone) ? "block-container" : "") ">
    @if(ViewBag.IsStandalone)
    {
        <div style="text-align: left; margin-left: 10px; margin-bottom: 10px;">
            <select id="x_verbSelect"></select>
        </div>
    }

    <svg id="svg_@(ViewBag.Key)" width="@ViewBag.Width" height="@ViewBag.Height"></svg>
</div>
<style>

.legend {
        
}

.dot {
  stroke: #000;
  stroke-opacity: 0.6;
}

.tooltip {
  position: absolute;
  width: 200px;
  /*height: 28px;*/
  pointer-events: none;
  background: black;
  color: white;
  border-radius: 5px;
  padding: 3px;
  padding-left: 6px;
}

</style>

<!--
    Based on:
    http://bl.ocks.org/weiglemc/6185069
-->


<script>



    var chapterMap_@(ViewBag.Key) = undefined;
    var chapterMapReverse_@(ViewBag.Key) = undefined;

    var parseDate_@(ViewBag.Key) = d3.timeParse("%d/%m/%Y"),
    formatCount_@(ViewBag.Key) = d3.format(",.0f");

    var svg_@(ViewBag.Key) = d3.select("#svg_@(ViewBag.Key)");
    var margin_@(ViewBag.Key) = { top: 20, right: 30, bottom: 30, left: 10 },
    width_@(ViewBag.Key) = +svg_@(ViewBag.Key).attr("width") - margin_@(ViewBag.Key).left - margin_@(ViewBag.Key).right,
    height_@(ViewBag.Key) = +svg_@(ViewBag.Key).attr("height") - margin_@(ViewBag.Key).top - margin_@(ViewBag.Key).bottom;

    var x_@(ViewBag.Key) = d3.scaleTime()
    .rangeRound([0, width_@(ViewBag.Key) - 200]);

    var y_@(ViewBag.Key) = d3.scaleLinear()
    .range([height_@(ViewBag.Key), 0]);


/* 
* value accessor - returns the value to encode for a given data object.
* scale - maps value to a visual display encoding, such as a pixel position.
* map function - maps from data value to display value
* axis - sets up axis
*/

// setup x 
    var xValue_@(ViewBag.Key) = function (d) { return d.date; }, // data -> value
    xScale_@(ViewBag.Key) = d3.scaleTime().range([0, width_@(ViewBag.Key) - 200]), // value -> display
    xMap_@(ViewBag.Key) = function (d) { return xScale_@(ViewBag.Key)(xValue_@(ViewBag.Key)(d)); }; // data -> display
//    xAxis = d3.svg.axis().scale(xScale).orient("bottom");

// setup y
    var yValue_@(ViewBag.Key) = function (d) { return d.chapterid; }, // data -> value
    yScale_@(ViewBag.Key) = d3.scaleLinear().range([1, height_@(ViewBag.Key)]), // value -> display
    yMap_@(ViewBag.Key) = function (d) { return yScale_@(ViewBag.Key)(yValue_@(ViewBag.Key)(d) - 1); }; // data -> display
    //yAxis = d3.svg.axis().scale(yScale).orient("left");

    var cValue_@(ViewBag.Key) = function (d) { return d.chapterid; };
    var color_@(ViewBag.Key) = GetVitalColorSet();//d3.scaleOrdinal(d3.schemeCategory20);

    var zScale_@(ViewBag.Key);


//var histogram = d3.histogram()
//    .value(function(d) { return d.hour; })
//    .domain(x.domain())
//    .thresholds(x.ticks(24)/*x.ticks(d3.timeWeek)*/);

    svg_@(ViewBag.Key) = svg_@(ViewBag.Key).attr("width", width_@(ViewBag.Key) + margin_@(ViewBag.Key).left + margin_@(ViewBag.Key).right)
        .attr("height", height_@(ViewBag.Key) + margin_@(ViewBag.Key).top + margin_@(ViewBag.Key).bottom);
    g_@(ViewBag.Key) = svg_@(ViewBag.Key).append("g")
        .attr("class", "graphRoot")
        .attr("transform", "translate(" + margin_@(ViewBag.Key).left + "," + margin_@(ViewBag.Key).top + ")");


    // add the tooltip area to the webpage
    var tooltip_@(ViewBag.Key) = d3.select("body").append("div")
    .attr("class", "tooltip")
    .style("opacity", 0);

    //buildChart_@(ViewBag.Key)();
    GlobalRebuildFunctions.push(buildChart_@(ViewBag.Key));


    
    function GetData_ChaptersInOrder_@(ViewBag.Key)(queueCallback) {
        ///alert('before');
        var parameters = {};
        parameters["courseinstanceid"] = GetSelectedCourseInstance();//"@(ViewBag.CourseInstanceId)";
        GetData('@ViewBag.ApiUrl/v1/Data/ChaptersInOrder', chapterOrderDataLoaded_@(ViewBag.Key), parameters, queueCallback);
    }
    function chapterOrderDataLoaded_@(ViewBag.Key)(error, data) {
        chapterMap_@(ViewBag.Key) = new Map();

        data = JSON.parse(data);
        for (var record in data) {
            chapterMap_@(ViewBag.Key).set(data[record].Name, data[record].OrderId);
        }
        chapterMapReverse_@(ViewBag.Key) = Array.from(chapterMap_@(ViewBag.Key).keys());
    }

//function rebuildCharts() {
//    buildChart();
    //}
    function buildChart_@(ViewBag.Key)() {
        InsertLoadingIndication(g_@(ViewBag.Key));

        var queue_@(ViewBag.Key) = d3.queue();
        queue_@(ViewBag.Key).defer(GetData_ChaptersInOrder_@(ViewBag.Key));
        queue_@(ViewBag.Key).awaitAll(function (error) {
            ///alert('after');
            buildChart_part_@(ViewBag.Key)();
        });
    }
    function buildChart_part_@(ViewBag.Key)() {
        var jsonData = {};
        jsonData["courseinstanceid"] = GetSelectedCourseInstance(); //"@(ViewBag.CourseInstanceId)";
        AddDataFilterFromCombo("#x_studentSelect", "logagentid", jsonData);
        AddDataFilterFromCombo("#x_verbSelect", "logverbid", jsonData);
        GetCsvChartData("@ViewBag.ApiUrl/v1/ChartData/ActivityByChapter", type_@(ViewBag.Key), callback_@(ViewBag.Key), jsonData);
    }

    function type_@(ViewBag.Key)(d) {
        d.date = parseDate_@(ViewBag.Key)(d.date);
        //alert(d.chapter);
        d.chapterid = chapterMap_@(ViewBag.Key).get(d.chapter);
        return d;
    }

    //var isFirstRender_@(ViewBag.Key) = true;
    //var listOfRenderedCourseInstances_@(ViewBag.Key) = [];
    var previouslyRenderedCourseInstance = undefined;
    function callback_@(ViewBag.Key)(error, data) {
        if (error) throw error;
    
        g_@(ViewBag.Key).selectAll("g").remove();//Clear old chart
        var groot = g_@(ViewBag.Key).append("g");
        var timeblockLayer = groot.append("g");

        var courseInstanceId = GetSelectedCourseInstance();
        if (previouslyRenderedCourseInstance != courseInstanceId)//Only set the x/y domains the first time for (reloaded) courseInstance (when the entire dataset is loaded).
            //listOfRenderedCourseInstances_@(ViewBag.Key).indexOf(courseInstanceId) == -1) //isFirstRender_@(ViewBag.Key)) {
        {
            previouslyRenderedCourseInstance = courseInstanceId;

            x_@(ViewBag.Key).domain(d3.extent(data, function (d) { return d.date; }));
            y_@(ViewBag.Key).domain([-1, d3.max(data, function (d) { return +d.chapterid; }) ]);
            xScale_@(ViewBag.Key).domain(d3.extent(data, function (d) { return d.date; }));
            yScale_@(ViewBag.Key).domain([-1, d3.max(data, function (d) { return +d.chapterid; }) ]);
            color_@(ViewBag.Key) = GetVitalColorSet();//d3.scaleOrdinal(d3.schemeCategory20);//Reinitialize color to refresh the used domain
            //isFirstRender_@(ViewBag.Key) = false;
            //listOfRenderedCourseInstances_@(ViewBag.Key).push(courseInstanceId);
            
        }

        for (i = 0 ; i < data.length ; i++)//(i = data.length - 1 ; i >= 0 ; i--)
        {//Clean up data (empty chapters or 0-counts)
            if (data[i].chapter == "" || data[i].count == 0)
            {
                data.splice(i, 1);//Remove element
                i--;//Keep this index for the next run
            }
        }

        zScale_@(ViewBag.Key) = d3.max(data, function (d) { return +d.count; });

//        svg_@(ViewBag.Key).append("g")
//            .attr("class", "axis axis--y")
//            .call(d3.axisLeft(y_@(ViewBag.Key).nice()));
  
        groot.append("g")
        .attr("class", "axis axis--x")
        .attr("transform", "translate(0," + height_@(ViewBag.Key) + ")")
        .call(d3.axisBottom(xScale_@(ViewBag.Key)).ticks(10));


        // draw dots
        groot.selectAll(".dot")
            .data(data)
          .enter().append("ellipse")
            .attr("class", "dot")
            .attr("rx", 2.5)
            .attr("ry", function (d) {
                /*var tmp = (d.count / zScale) * 10;
                if (tmp < 2.5)
                    tmp = 2.5;
                return tmp;*/
                var multiplier = 1.2;
                var tmp = 2.5;

                if (d.count < 0.003 * zScale_@(ViewBag.Key)) tmp = 2.5;
                else if (d.count < 0.025 * zScale_@(ViewBag.Key)) tmp = 4;
                else if (d.count < 0.15 * zScale_@(ViewBag.Key)) tmp = 4.75;
                else if (d.count < 0.25 * zScale_@(ViewBag.Key)) tmp = 5.5;
                else if (d.count < 0.40 * zScale_@(ViewBag.Key)) tmp = 6.25;
                else if (d.count < 0.55 * zScale_@(ViewBag.Key)) tmp = 7;
                else if (d.count < 0.70 * zScale_@(ViewBag.Key)) tmp = 8.25;
                else if (d.count < 0.85 * zScale_@(ViewBag.Key)) tmp = 9.5;
                else tmp = 11;

                return tmp * multiplier;
                /*if (d.count < 100) return 2.5;
                else if (d.count < 1000) return 4;
                else if (d.count < 10000) return 5.5;
                else if (d.count < 20000) return 7;
                else return 8.5;*/
            })
            .attr("cx", xMap_@(ViewBag.Key))
            .attr("cy", yMap_@(ViewBag.Key))
            .style("fill", function (d) { return color_@(ViewBag.Key)(cValue_@(ViewBag.Key)(d)); })
            .on("mouseover", function (d) {
                tooltip_@(ViewBag.Key).transition()
                     .duration(200)
                     .style("opacity", .9);
                tooltip_@(ViewBag.Key).html(d.chapter + " @@ " + xValue_@(ViewBag.Key)(d).toLocaleDateString() + "<br/> (" + d.count + " logs)")
                     .style("left", (d3.event.pageX + 5) + "px")
                     .style("top", (d3.event.pageY - 28) + "px");
            })
            .on("mouseout", function (d) {
                tooltip_@(ViewBag.Key).transition()
                     .duration(500)
                     .style("opacity", 0);
            });



        GetLinkedTimeBlocks_@(ViewBag.Key)(timeblockLayer);




        g_@(ViewBag.Key).selectAll(".legend").remove();

        var legendDomain = color_@(ViewBag.Key).domain();
        for (var key in chapterMapReverse_@(ViewBag.Key)) {
            var val = chapterMap_@(ViewBag.Key).get(chapterMapReverse_@(ViewBag.Key)[key]);
            if(legendDomain.indexOf(val) == -1)
                legendDomain.push(val);
        }

        var legend = g_@(ViewBag.Key).selectAll(".legend")
          .data(legendDomain)
          //  .data(yScale.domain())
        .enter().append("g")
          .attr("class", "legend")
          //.attr("transform", function (d, i) { return "translate(-150," + i * 20 + ")"; });
        .attr("transform", function (d, i) {
            for (var key in chapterMapReverse_@(ViewBag.Key)) {
                if (chapterMap_@(ViewBag.Key).get(chapterMapReverse_@(ViewBag.Key)[key]) == d)
                    return "translate(-150," + ((d - 1) * 18) + ")";
            }
        });

        // draw legend colored rectangles
        legend.append("rect")
            .attr("x", width_@(ViewBag.Key) - 0)
            .attr("width", 17)
            .attr("height", 17)
            .style("fill", color_@(ViewBag.Key))
            .on("mouseover", function (d) {
                tooltip_@(ViewBag.Key).transition()
                     .duration(200)
                     .style("opacity", .9);
                tooltip_@(ViewBag.Key).html(chapterMapReverse_@(ViewBag.Key)[d - 1]/* + d.chapter + " @@ " + xValue_(ViewBag.Key)(d).toLocaleDateString() + "<br/> (" + d.count + " logs)"*/)
                     .style("left", (d3.event.pageX + 5) + "px")
                     .style("top", (d3.event.pageY - 28) + "px");
            })
            .on("mouseout", function (d) {
                tooltip_@(ViewBag.Key).transition()
                     .duration(500)
                     .style("opacity", 0);
            });;

        // draw legend text
            legend.append("text")
                //.attr("x", width - 24)
                .attr("x", width_@(ViewBag.Key) + 17+2)
            .attr("y", 9)
            .attr("dy", ".35em")
            //.style("text-anchor", "end")
            .style("text-anchor", "start")
            .text(function (d) {
                for (var key in chapterMapReverse_@(ViewBag.Key)) {
                    if (chapterMap_@(ViewBag.Key).get(chapterMapReverse_@(ViewBag.Key)[key]) == d)
                        return chapterMapReverse_@(ViewBag.Key)[key];
                }
            })
             .on("mouseover", function (d) {
                 tooltip_@(ViewBag.Key).transition()
                      .duration(200)
                      .style("opacity", .9);
                 tooltip_@(ViewBag.Key).html(chapterMapReverse_@(ViewBag.Key)[d - 1]/* + d.chapter + " @@ " + xValue_(ViewBag.Key)(d).toLocaleDateString() + "<br/> (" + d.count + " logs)"*/)
                      .style("left", (d3.event.pageX + 5) + "px")
                      .style("top", (d3.event.pageY - 28) + "px");
             })
            .on("mouseout", function (d) {
                tooltip_@(ViewBag.Key).transition()
                     .duration(500)
                     .style("opacity", 0);
            });


        
        @*return;
        g_@(ViewBag.Key).selectAll(".legend").remove();

        var legend = g_@(ViewBag.Key).selectAll(".legend")
          .data(color_@(ViewBag.Key).domain())
          //  .data(yScale.domain())
        .enter().append("g")
          .attr("class", "legend")
          //.attr("transform", function (d, i) { return "translate(-150," + i * 20 + ")"; });
        .attr("transform", function (d, i) {
            for (var key in chapterMapReverse_@(ViewBag.Key)) {
                if (chapterMap_@(ViewBag.Key).get(chapterMapReverse_@(ViewBag.Key)[key]) == d)
                    return "translate(-150," + ((d-1) * 18) + ")";
            }
        });

        // draw legend colored rectangles
        legend.append("rect")
            .attr("x", width_@(ViewBag.Key) - 17)
            .attr("width", 17)
            .attr("height", 17)
            .style("fill", color_@(ViewBag.Key))
            .on("mouseover", function (d) {
                tooltip_@(ViewBag.Key).transition()
                     .duration(200)
                     .style("opacity", .9);
                tooltip_@(ViewBag.Key).html(chapterMapReverse_@(ViewBag.Key)[d - 1]/* + d.chapter + " @@ " + xValue_(ViewBag.Key)(d).toLocaleDateString() + "<br/> (" + d.count + " logs)"*/)
                     .style("left", (d3.event.pageX + 5) + "px")
                     .style("top", (d3.event.pageY - 28) + "px");
            })
            .on("mouseout", function (d) {
                tooltip_@(ViewBag.Key).transition()
                     .duration(500)
                     .style("opacity", 0);
            });;

        // draw legend text
        legend.append("text")
            //.attr("x", width - 24)
            .attr("x", width_@(ViewBag.Key) + 2)
            .attr("y", 9)
            .attr("dy", ".35em")
            //.style("text-anchor", "end")
            .style("text-anchor", "start")
            .text(function (d) {
                for (var key in chapterMapReverse_@(ViewBag.Key)) {
                    if (chapterMap_@(ViewBag.Key).get(chapterMapReverse_@(ViewBag.Key)[key]) == d)
                        return chapterMapReverse_@(ViewBag.Key)[key];
                }
            })
             .on("mouseover", function (d) {
                 tooltip_@(ViewBag.Key).transition()
                      .duration(200)
                      .style("opacity", .9);
                 tooltip_@(ViewBag.Key).html(chapterMapReverse_@(ViewBag.Key)[d-1]/* + d.chapter + " @@ " + xValue_(ViewBag.Key)(d).toLocaleDateString() + "<br/> (" + d.count + " logs)"*/)
                      .style("left", (d3.event.pageX + 5) + "px")
                      .style("top", (d3.event.pageY - 28) + "px");
             })
            .on("mouseout", function (d) {
                tooltip_@(ViewBag.Key).transition()
                     .duration(500)
                     .style("opacity", 0);
            });
        *@
    }

    function GetLinkedTimeBlocks_@(ViewBag.Key)(focusPanel) {
        var parameters = {};
        parameters["courseinstanceid"] = GetSelectedCourseInstance();//"@(ViewBag.CourseInstanceId)";
        _g__@(ViewBag.Key) = focusPanel;
        GetData('@(ViewBag.ApiUrl)/v1/Data/CourseInstanceTimeBlocks', timeBlockDataLoaded_@(ViewBag.Key), parameters);
    }

    //var classData_@(ViewBag.Key);
    function timeBlockDataLoaded_@(ViewBag.Key)(error, data) {
        data = JSON.parse(data);
        var parser = d3.timeParse("%Y-%m-%d");
        //classData_@(ViewBag.Key) = {};
        for (var obj in data) {
            var timeblock = data[obj].TimeBlock;

            var from_dt = data[obj].FromDate.substr(0, 10);
            from_dt = parser(from_dt);

            var until_dt = data[obj].UntilDate.substr(0, 10);
            until_dt = parser(until_dt);

@*            if (!classData_@(ViewBag.Key)[dt])
                classData_@(ViewBag.Key)[dt] = [];
            classData_@(ViewBag.Key)[dt].push(data[obj]);*@

            if (isNaN(x_@(ViewBag.Key)(from_dt)) 
                || isNaN(x_@(ViewBag.Key)(until_dt)))
                continue;

            var timeBlockRect = _g__@(ViewBag.Key).append("rect")
                .attr("x", x_@(ViewBag.Key)(from_dt))
                .attr("y", 0)
                .attr("width", x_@(ViewBag.Key)(until_dt) - x_@(ViewBag.Key)(from_dt))
                .attr("height", height_@(ViewBag.Key))
                .style("stroke-width", 1)
                .style("stroke", "gray")
                //.style("stroke-dasharray", "10,10")
                .style("fill", "rgba(100,100,100,0.1)");
            //.append("title").text("This is a blue line")
            //.on("mouseover", function () { alert('a'); console.log(data[obj].Id); })

            _g__@(ViewBag.Key).append("text")
                .attr("x", (x_@(ViewBag.Key)(from_dt) + x_@(ViewBag.Key)(until_dt))/2)
                .attr("y", 8)
                .style("stroke", "gray")
                .attr("dy", ".35em")
                .style("text-anchor", "middle")
                .text(timeblock);

            var yBandwidth = (height_@(ViewBag.Key) / (chapterMapReverse_@(ViewBag.Key).length+1));

            for(var i = 0 ; i < data[obj].HandledChapters.length ; i++)
            {
                _g__@(ViewBag.Key).append("rect")
                     .attr("x", x_@(ViewBag.Key)(from_dt))
                    .attr("width", x_@(ViewBag.Key)(until_dt) - x_@(ViewBag.Key)(from_dt))
               @*     .attr("y", height_@(ViewBag.Key) - y_@(ViewBag.Key)(chapterMap_@(ViewBag.Key).get(data[obj].HandledChapters[i])) - yBandwidth * 1.125)
                    .attr("height", yBandwidth / 2)*@
                    .attr("y", height_@(ViewBag.Key) - y_@(ViewBag.Key)(chapterMap_@(ViewBag.Key).get(data[obj].HandledChapters[i])) - yBandwidth*1.4)
                    .attr("height", yBandwidth*0.8)
                    .style("stroke-width", 1)
                    .style("stroke", "gray")
                    //.style("stroke-dasharray", "10,10")
                    .style("opacity", 0.5)
                    .style("fill", color_@(ViewBag.Key)(chapterMap_@(ViewBag.Key).get(data[obj].HandledChapters[i])));
                    //.style("fill", "rgba(221, 54, 82, 0.43)");
            }
        }
    }

</script>

@if(ViewBag.IsStandalone)
{
    //Html.RenderPartial("~/Views/Shared/_PartialPage_FilterCourseInstance.cshtml");
    //Html.RenderPartial("~/Views/Shared/_PartialPage_FilterStudent.cshtml");
    Html.RenderPartial("~/Views/Shared/_PartialPage_FilterVerb.cshtml");
}




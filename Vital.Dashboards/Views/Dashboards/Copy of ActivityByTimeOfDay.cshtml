
@{
    ViewBag.Title = "ActivityByTimeOfDay";
}


<svg width="960" height="500"></svg>

<style>

.bar rect {
  fill: steelblue;
}

.bar text {
  fill: #000;
  font: 10px sans-serif;
}

</style>

<!--
    For JSON alternative:
    https://www.dashingd3js.com/svg-basic-shapes-and-d3js

    Using mapping:
    https://bl.ocks.org/mbostock/5977197
-->

<script src="//d3js.org/d3.v4.min.js"></script>
<script>

var parseDate = d3.timeParse("%H"),//"%m/%d/%Y %H:%M:%S %p"),
    formatCount = d3.format(",.0f");

var margin = {top: 10, right: 30, bottom: 30, left: 60},
    width = 960 - margin.left - margin.right,
    height = 500 - margin.top - margin.bottom;

var x = d3.scaleLinear()
    .domain([0, 23])
    .rangeRound([0, width]);

var y = d3.scaleLinear()
    .range([height, 0]);

var histogram = d3.histogram()
    .value(function(d) { return d.hour; })
    .domain(x.domain())
    .thresholds(x.ticks(24)/*x.ticks(d3.timeWeek)*/);

var svg = d3.select("svg")//.append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

svg.append("g")
    .attr("class", "axis axis--x")
    .attr("transform", "translate(0," + height + ")")
    .call(d3.axisBottom(x).ticks(24));

//svg.append("g")
//    .attr("class", "axis axis--y")
//    //.attr("transform", "translate(0," + height + ")")
//    .call(d3.axisLeft(y));

d3.csv("@ViewBag.ApiUrl/v1/ChartData/ActivityByTimeOfDay"/*"../FakeDataSource/ActivityByTimeOfDay.html"*/, type, function (error, data) {
  if (error) throw error;

  var bins = histogram(data);

  y.domain([0, d3.max(bins, function (d)
  {
      return +d[0].count; //return d.length;
  })]);

    //yAxis = d3.svg.axis().scale(y).orient("left");//.tickFormat(formatPercent);
    svg.append("g")
        .attr("class", "axis axis--y")
        //.attr("transform", "translate(0," + height + ")")
        .call(d3.axisLeft(y.nice()));
  


  var bar = svg.selectAll(".bar")
      .data(bins)
      .enter().append("g")
      .attr("class", "bar")
      //.attr("data-test", function (d)
      //{
      //    return "translate(" + x(d.x0) + "," + (y(d.length)) + " -- " + y(+d[0].count) + ")";
      //})
      .attr("transform", function (d)
          {
          return "translate(" + x(d.x0) + "," + y(/*y.domain()[1] - */d[0].count) + ")";
      });
    


  bar.append("rect")
      .attr("x", 1)
      
      //.attr("x", function (d) { return x(d.hour); })
      //.attr("width", function(d) { return x(d.x1) - x(d.x0) - 1; })
    //.attr("height", function (d) { return height - y(d.length); });
      .attr("width", function (d) { return x(d.x1) - x(d.x0) - 1; })
          .attr("height", function (d)
          {
              return y(y.domain()[1] - d[0].count);//height - y(d.length);
          });

    //.attr("height", function (d)
    //{
    //    return (y(+d[0].count)) + "px";
    //})
    

  bar.append("text")
      .attr("dy", ".75em")
      .attr("y", -9)
      .attr("x", function (d) { return (x(d.x1) - x(d.x0)) / 2; })
      .attr("text-anchor", "middle")
      //.attr("rotate", "45")
      .text(function (d)
      {
          return /*formatCount*/(+d[0].count);
      });
});

function type(d) {
    //alert(d.hour);
    d.hour = +d.hour;//parseDate(d.hour);
    
  return d;
}

</script>






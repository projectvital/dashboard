@*
    Project VITAL.Dashboard
    Copyright (C) 2017 - Universiteit Hasselt
    This project has been funded with support from the European Commission (Project number: 2015-BE02-KA203-012317). 

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*@


@{
    ViewBag.Title = "TopTimeSpentByChapter";
    ViewBag.RequireD3 = true;
    ViewBag.InstanceId = Guid.NewGuid().ToString().Replace("-", "");
    ViewBag.Key = ViewBag.Title + "_" + ViewBag.InstanceId;

    ViewBag.Width = (this.Model != null && this.Model.ContainsKey("width")) ? this.Model["width"] : 960;
    ViewBag.Height = (this.Model != null && this.Model.ContainsKey("height")) ? this.Model["height"] : 500;
    ViewBag.IsStandalone = (this.Model == null);
}


@if (ViewBag.IsStandalone)
{
    Html.RenderPartial("~/Views/Shared/_PartialPage_GlobalRebuildScript.cshtml");
    
    @*<div class="block-container filter">
        <select id="x_courseInstanceSelect"></select>
        <select id="x_studentSelect"></select>
    </div>
    <br />*@
}
<div class="@((ViewBag.IsStandalone)?"block-container": "") ">
    <svg id="svg_@(ViewBag.Key)" width="@ViewBag.Width" height="@ViewBag.Height"></svg>
</div>

<style>
    .caption {
        font-size: 0.75em;
        font-weight: bold;
    }

    .bar {
      fill: #386cb0;
    }

    .bar:hover {
      fill: #BF5B17;
    }

    .label {
      fill: black;
      font: 10px sans-serif;
      font-weight: bold;
    }
</style>


<script>
    var svg_@(ViewBag.Key) = d3.select("#svg_@(ViewBag.Key)"),
    margin_@(ViewBag.Key) = { top: 20, right: 20, bottom: 35, left: 100 },
    width_@(ViewBag.Key) = +svg_@(ViewBag.Key).attr("width") - margin_@(ViewBag.Key).left - margin_@(ViewBag.Key).right,
    height_@(ViewBag.Key) = +svg_@(ViewBag.Key).attr("height") - margin_@(ViewBag.Key).top - margin_@(ViewBag.Key).bottom,
    g_@(ViewBag.Key) = svg_@(ViewBag.Key).append("g").attr("transform", "translate(" + margin_@(ViewBag.Key).left + "," + margin_@(ViewBag.Key).top + ")");
    

    var x_@(ViewBag.Key) = d3.scaleLinear()
          .range([0, width_@(ViewBag.Key)]);

    var y_@(ViewBag.Key) = d3.scaleBand()
        .range([height_@(ViewBag.Key), 0]);

    var xAxis_@(ViewBag.Key) = d3.axisBottom(x_@(ViewBag.Key))
        .ticks(10);

    var yAxis_@(ViewBag.Key) = d3.axisLeft(y_@(ViewBag.Key));


    //buildChart();
    GlobalRebuildFunctions.push(buildChart_@(ViewBag.Key));

    //function rebuildCharts() {
    //    buildChart();
    //}
    function buildChart_@(ViewBag.Key)() {
        InsertLoadingIndication(g_@(ViewBag.Key));

        var jsonData = {};
        //jsonData["timeblock"] = 10;
        jsonData["courseinstanceid"] = GetSelectedCourseInstance(); //"@(ViewBag.CourseInstanceId)";
        AddDataFilterFromCombo("#x_studentSelect", "logagentid", jsonData);
        AddDataFilterFromCombo("#x_programmeSelect", "programmeid", jsonData);
        //AddDataFilterFromCombo("#x_verbSelect", "logverbid", jsonData);

        GetCsvChartData("@ViewBag.ApiUrl/v1/ChartData/TimeSpentByChapter", type_@(ViewBag.Key), callback_@(ViewBag.Key), jsonData/*"a=2&b=3"*/);
    }

    function type_@(ViewBag.Key)(d, i, columns) {
        for (var i = 1, n = columns.length; i < n; ++i) d[columns[i]] = +d[columns[i]];

        d.duration = d.duration / 60 / 60;//seconds -> hours

        return d;
    }

    function callback_@(ViewBag.Key)(error, data) {
        if (error) throw error;

        g_@(ViewBag.Key).selectAll("g").remove();//Clear old chart
        var groot = g_@(ViewBag.Key).append("g");

        data.sort(function(a, b) {
            return parseFloat(a.duration) - parseFloat(b.duration);
        });

        x_@(ViewBag.Key).domain([0, d3.max(data, function (d) { return d.duration; })]);

        y_@(ViewBag.Key).domain(data.map(function (d) { return d.chapter; }))
          .paddingInner(0.1)
          .paddingOuter(0.5);


        groot.append("g")
            .attr("class", "x axis")
            .attr("transform", "translate(0," + height_@(ViewBag.Key) + ")")
            .call(xAxis_@(ViewBag.Key))
          .append("text")
            .attr("class", "label")
            .attr("transform", "translate(" + width_@(ViewBag.Key) + ",0)")
            .attr("y", -5)
            .style("text-anchor", "end")
            .text("Time spent (h)");

        groot.append("g")
            .attr("class", "y axis")
            .call(yAxis_@(ViewBag.Key))
          .append("text")
            .attr("class", "label")
            .attr("transform", "translate(-5,0)")
            .attr("x", 0)
            .style("text-anchor", "end")
            .text("Chapter");

        var bar = groot.selectAll(".bar")
            .data(data)
          .enter();
        bar.append("rect")
            .attr("class", "bar")
            .attr("x", 0)
            .attr("height", y_@(ViewBag.Key).bandwidth())
            .attr("y", function (d) { return y_@(ViewBag.Key)(d.chapter); })
            .attr("width", function (d) { return x_@(ViewBag.Key)(d.duration); });
        bar.append("text")
            //.attr("dx", "1em")
            .attr("dy", "-0.25em")
            .attr("class", "caption")
            .attr("transform", function (d) { return "translate(" + (x_@(ViewBag.Key)(d.duration)) + "," + (y_@(ViewBag.Key)(d.chapter)) + ") rotate(90)"; })
            //.attr("dy", function (d) { return y(d.chapter) + y.bandwidth() / 2; })
            //.attr("dx", function (d) { return x(d.duration) ; })
            //.attr("text-anchor", "start")
            .text(function (d) {
                var res = "";
                if (d.duration > 24)
                    res = Math.floor(d.duration / 24) + "d ";
                res += padWithZeroes(Math.floor(d.duration % 24), 2) + ":" + padWithZeroes(Math.floor(d.duration * 60 % 60), 2) + "";
                return res;
            });



        //groot.selectAll(".y.axis .tick text")
        //    .attr("lengthAdjust", "spacingAndGlyphs")
        //    .attr("textLength", "80");


    }



</script>

@*@if (ViewBag.IsStandalone)
{
    Html.RenderPartial("~/Views/Shared/_PartialPage_FilterCourseInstance.cshtml");
    Html.RenderPartial("~/Views/Shared/_PartialPage_FilterStudent.cshtml");
}*@

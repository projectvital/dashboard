
@{
    ViewBag.Title = "ActivityTypesByDay";
    ViewBag.RequireD3 = true;
    ViewBag.InstanceId = Guid.NewGuid().ToString().Replace("-", "");
    ViewBag.Key = ViewBag.Title + "_" + ViewBag.InstanceId;

    ViewBag.Width = (this.Model != null && this.Model.ContainsKey("width")) ? this.Model["width"] : 960;
    ViewBag.Height = (this.Model != null && this.Model.ContainsKey("height")) ? this.Model["height"] : 500;
    ViewBag.IsStandalone = (this.Model == null);
}


<style>

.axis--x path {
  display: none;
}

.line {
  fill: none;
  stroke: steelblue;
  stroke-width: 1.5px;
}

.overlay {
  fill: none;
  pointer-events: all;
}

#legend_@(ViewBag.Key) {
@*    font-size: 16px;
    font-weight: bold;
    float: right;
    border: 1px solid black;
    border-radius: 0 0 10px 10px;
    width: 180px;
    min-height: 50px;
    text-align: left;*@
    display: none;
}
.legendTitle
{
    background-color: antiquewhite;
    border-bottom: 3px double black;
    padding: 2px;
}
#legendContent_@(ViewBag.Key){
    padding: 2px;
    font-size: 0.70em;
@*    border: 1px solid black;
    border-radius: 5px;*@
}
.legendBlock{
        padding-top: 4px;
}
.legendBlock .text .fix-width
{
    width: 30px;
    display: inline-block;
}

    


#svg_@(ViewBag.Key) .axis--x g.tick text {
    font-size: 0.7em;
}

</style>

@* For student selection: refactor code to buildChart() function *@
@if (ViewBag.IsStandalone)
{
    Html.RenderPartial("~/Views/Shared/_PartialPage_GlobalRebuildScript.cshtml");
    
    @*<div class="block-container filter">
        <select id="x_courseInstanceSelect"></select>
        <select id="x_studentSelect"></select>
        <select id="x_programmeSelect"></select>
    </div>
    <br />*@
}

<div class="@((ViewBag.IsStandalone)?"block-container": "") ">
    <svg id="svg_@(ViewBag.Key)" width="@ViewBag.Width" height="@ViewBag.Height"></svg>    
    <div id="legend_@(ViewBag.Key)">
    @*    <div class="legendTitle">
            Selection detail:
        </div>*@
        <div id="legendContent_@(ViewBag.Key)">

        </div>
    </div>
</div>


@*<div class="row">
    <div class="col-md-9">
        
    </div>
    <div class="col-md-3">
       
    </div>
</div>*@

<script>
    var svg_@(ViewBag.Key) = d3.select("#svg_@(ViewBag.Key)"),
         margin_@(ViewBag.Key) = { top: 10, right: 10, bottom: 30, left: 50 },
         width_@(ViewBag.Key) = +svg_@(ViewBag.Key).attr("width") - margin_@(ViewBag.Key).left - margin_@(ViewBag.Key).right,
         height_@(ViewBag.Key) = +svg_@(ViewBag.Key).attr("height") - margin_@(ViewBag.Key).top - margin_@(ViewBag.Key).bottom,
         g_@(ViewBag.Key) = svg_@(ViewBag.Key).append("g").attr("transform", "translate(" + margin_@(ViewBag.Key).left + "," + margin_@(ViewBag.Key).top + ")");

    var parseTime_@(ViewBag.Key) = d3.timeParse("%d/%m/%Y");

    var x_@(ViewBag.Key) = d3.scaleTime().range([0, width_@(ViewBag.Key)]),
        y_@(ViewBag.Key) = d3.scaleLinear().range([height_@(ViewBag.Key), 0]),
        //y = d3.scaleQuantile().range([height, 0]),
        z_@(ViewBag.Key) = GetVitalColorSet();//d3.scaleOrdinal(d3.schemeCategory10);

    var line_@(ViewBag.Key) = d3.line()
        //.curve(d3.curveBasis)
        //.curve(d3.curveCatmullRomOpen)
        //.curve(d3.curveLinear)
        .curve(d3.curveMonotoneX)
        //https://bl.ocks.org/d3noob/ced1b9b18bd8192d2c898884033b5529
        .x(function (d) { return x_@(ViewBag.Key)(d.date); })
        .y(function (d) { return y_@(ViewBag.Key)(d.temperature); });



    //buildChart_@(ViewBag.Key)();
    GlobalRebuildFunctions.push(buildChart_@(ViewBag.Key));

    //function rebuildCharts() {
    //    buildChart();
    //}
    function buildChart_@(ViewBag.Key)() {
        InsertLoadingIndication(g_@(ViewBag.Key));

        var jsonData = {};
        //jsonData["timeblock"] = 10;
        jsonData["courseinstanceid"] = GetSelectedCourseInstance(); //"@(ViewBag.CourseInstanceId)";
        AddDataFilterFromCombo("#x_studentSelect", "logagentid", jsonData);
        AddDataFilterFromCombo("#x_programmeSelect", "programmeid", jsonData);
        //AddDataFilterFromCombo("#x_verbSelect", "logverbid", jsonData);

        GetCsvChartData("@ViewBag.ApiUrl/v1/ChartData/ActivityTypesByDay", type_@(ViewBag.Key), callback_@(ViewBag.Key), jsonData/*"a=2&b=3"*/);
    }

    function type_@(ViewBag.Key)(d, _, columns) {
        d.date = parseTime_@(ViewBag.Key)(d.date);
        for (var i = 1, n = columns.length, c; i < n; ++i) d[c = columns[i]] = +d[c];
        return d;
    }

    function callback_@(ViewBag.Key)(error, data) {
        if (error) throw error;

        g_@(ViewBag.Key).selectAll("g").remove();//Clear old chart
        var groot = g_@(ViewBag.Key).append("g");

        var cities = data.columns.slice(1).map(function (id) {
            return {
                id: id,
                values: data.map(function (d) {
                    return { date: d.date, temperature: d[id] };
                })
            };
        });

        x_@(ViewBag.Key).domain(d3.extent(data, function (d) { return d.date; }));

        y_@(ViewBag.Key).domain([
          d3.min(cities, function (c) { return d3.min(c.values, function (d) { return d.temperature; }); }),
          d3.max(cities, function (c) { return d3.max(c.values, function (d) { return d.temperature; }); })
        ]);

        z_@(ViewBag.Key).domain(cities.map(function (c) { return c.id; }));

        groot.append("g")
            .attr("class", "axis axis--x")
            .attr("transform", "translate(0," + height_@(ViewBag.Key) + ")")
            .call(d3.axisBottom(x_@(ViewBag.Key)));

        groot.append("g")
            .attr("class", "axis axis--y")
            .call(d3.axisLeft(y_@(ViewBag.Key)))
          .append("text")
            .attr("transform", "rotate(-90)")
            .attr("y", 6)
            .attr("dy", "0.71em")
            .attr("fill", "#000")
            .text("Amount of activities");

        var city = groot.selectAll(".city")
          .data(cities)
          .enter().append("g")
            .attr("class", "city");

        city.append("path")
            .attr("class", "line")
            .attr("d", function (d) { return line_@(ViewBag.Key)(d.values); })
            .style("stroke", function (d) { return z_@(ViewBag.Key)(d.id); })
        .attr("data-category", function (d) { return d.id; });

        city.append("text")
            .datum(function (d) { return { id: d.id, value: d.values[d.values.length - 1] }; })
            .attr("transform", function (d) { return "translate(" + x_@(ViewBag.Key)(d.value.date) + "," + y_@(ViewBag.Key)(d.value.temperature) + ")"; })
            .attr("x", 3)
            .attr("dy", "0.35em")
            .style("font", "10px sans-serif")
        ;//.text(function (d) { return d.id; });
        
        var focusPanel = groot.append("g")
                  .attr("class", "focus");
          //.style("display", "none");

        var focusTotal = focusPanel.append("g");
        focusTotal.append("circle")
            .attr("r", 4.5).style("display", "none");
        focusTotal.append("text")
            .attr("x", 9)
            .attr("dy", ".35em");

        var focusSingle = focusPanel.append("g");
        focusSingle.append("circle")
            .attr("r", 4.5).style("display", "none");
        focusSingle.append("text")
            .attr("x", 9)
            .attr("dy", ".35em");

        var focusTheory = focusPanel.append("g");
        focusTheory.append("circle")
            .attr("r", 4.5).style("display", "none");
        focusTheory.append("text")
            .attr("x", 9)
            .attr("dy", ".35em");

        var focusLine = focusPanel.append("line")
            //.attr("x1", x(today))  //<<== change your code here
            .attr("y1", 0)
            //.attr("x2", x(today))  //<<== and here
            .attr("y2", height_@(ViewBag.Key))
            .style("stroke-width", 1)
            .style("stroke", "black")
            .style("fill", "none");

        var focusTitle = focusPanel.append("g");
        focusTitle.append("text")
            .attr("x", 9)
            .style("stroke", "gray")
            .attr("dy", ".35em")
            .style("text-anchor", "middle");

        GetLinkedClasses_@(ViewBag.Key)(focusPanel);

        groot.append("rect")
          .attr("class", "overlay")
          .attr("width", width_@(ViewBag.Key))
          .attr("height", height_@(ViewBag.Key))
          .on("mouseover", function () {/* focusPanel.style("display", null);*/$("circle").show(); $("#legend_@(ViewBag.Key)").show(); })
          //.on("mouseout", function () { focusPanel.style("display", "none"); $(".legend").hide(); })
          .on("mousemove", mousemove_@(ViewBag.Key));

        var formatDate = d3.timeFormat("%Y-%m-%d");
        var formatValue = d3.format(",.0f");
        var bisectDate = d3.bisector(function (d) { return d.date; }).left;
        var formatCurrency = function (d) { return "" + formatValue(d); };
        function mousemove_@(ViewBag.Key)() {
            var x0 = x_@(ViewBag.Key).invert(d3.mouse(this)[0]),
                i = bisectDate(data, x0, 1),
                d0 = data[i - 1],
                d1 = data[i];
            if (!d0 || !d1)
                return;
            d = x0 - d0.date > d1.date - x0 ? d1 : d0;

            focusTotal.attr("transform", "translate(" + x_@(ViewBag.Key)(d.date) + "," + y_@(ViewBag.Key)(d.amount_accessed_exercises) + ")");
            focusTotal.select("text").text(formatCurrency(d.amount_accessed_exercises));
            focusSingle.attr("transform", "translate(" + x_@(ViewBag.Key)(d.date) + "," + y_@(ViewBag.Key)(d.amount_completed_exercises) + ")");
            focusSingle.select("text").text(formatCurrency(d.amount_completed_exercises));
            focusTheory.attr("transform", "translate(" + x_@(ViewBag.Key)(d.date) + "," + y_@(ViewBag.Key)(d.amount_accessed_theorypages) + ")");
            focusTheory.select("text").text(formatCurrency(d.amount_accessed_theorypages));
            focusLine.attr("x1", "" + x_@(ViewBag.Key)(d.date));
            focusLine.attr("x2", "" + x_@(ViewBag.Key)(d.date));
            focusTitle.attr("transform", "translate(" + x_@(ViewBag.Key)(d.date) + "," + (height_@(ViewBag.Key) + 22) + ")");
            focusTitle.select("text").text(formatDate(d.date));


@*            var details = "<br /><div class=\"legendColorSphere\" style=\"background-color:" + z_@(ViewBag.Key)("amount_accessed_exercises") + "\"></div><span>Accessed Exercise: " + formatCurrency(d.amount_accessed_exercises) + "</span>" +
                "<br /><div class=\"legendColorSphere\" style=\"background-color:" + z_@(ViewBag.Key)("amount_completed_exercises") + "\"></div><span>Completed Exercise: " + formatCurrency(d.amount_completed_exercises) + "</span>" +
                "<br /><div class=\"legendColorSphere\" style=\"background-color:" + z_@(ViewBag.Key)("amount_accessed_theorypages") + "\"></div><span>Accessed Theory: " + formatCurrency(d.amount_accessed_theorypages) + "</span>";*@

            var details = "<div class=\"legendBlock\"><div class=\"color sphere\" style=\"background-color:" + z_@(ViewBag.Key)("amount_accessed_exercises") + "\" onmouseover=\"highlightLine_@(ViewBag.Key)('amount_accessed_exercises')\" onmouseout=\"highlightLineClear_@(ViewBag.Key)()\"></div><div class=\"text\">Accessed Exercise: <div class=\"fix-width\">" + formatCurrency(d.amount_accessed_exercises) + "</div></div></div>" +
                "<div class=\"legendBlock\"><div class=\"color sphere\" style=\"background-color:" + z_@(ViewBag.Key)("amount_completed_exercises") + "\" onmouseover=\"highlightLine_@(ViewBag.Key)('amount_completed_exercises')\" onmouseout=\"highlightLineClear_@(ViewBag.Key)()\"></div><div class=\"text\">Completed Exercise: <div class=\"fix-width\">" + formatCurrency(d.amount_completed_exercises) + "</div></div></div>" +
                "<div class=\"legendBlock\"><div class=\"color sphere\" style=\"background-color:" + z_@(ViewBag.Key)("amount_accessed_theorypages") + "\" onmouseover=\"highlightLine_@(ViewBag.Key)('amount_accessed_theorypages')\" onmouseout=\"highlightLineClear_@(ViewBag.Key)()\"></div><div class=\"text\">Accessed Theory: <div class=\"fix-width\">" + formatCurrency(d.amount_accessed_theorypages) + "</div></div></div>";

            details += "<div class=\"legendClassBlockContainer\">";

            var classData = classData_@(ViewBag.Key);
            if (d !== undefined && classData !== undefined && classData[d.date] !== undefined) {
                for (var i = 0 ; i < classData[d.date].length ; i++) {
                    details += "<div class=\"legendClassBlock\">" + classData[d.date][i].FromDate.substr(11, 5) + "-" + classData[d.date][i].UntilDate.substr(11, 5) + " | " + classData[d.date][i].ClassType + ": " + classData[d.date][i].TeacherName + "</div>";
                }
            }

            details += "</div>";

            $("#legendContent_@(ViewBag.Key)").html("<div class=\"legendDate\">" + formatDate(d.date) + "</div>" +
                details
                );
        }

    }

    function GetLinkedClasses_@(ViewBag.Key)(focusPanel) {
        var parameters = {};
        parameters["courseinstanceid"] = GetSelectedCourseInstance();//"@(ViewBag.CourseInstanceId)";
        AddDataFilterFromCombo("#x_programmeSelect", "programmeid", parameters);
        if (!parameters["programmeid"])
            return;//Only show classes for a specific programme/group
        _g__@(ViewBag.Key) = focusPanel;
        GetData('@ViewBag.ApiUrl/v1/Data/Classes', classDataLoaded_@(ViewBag.Key), parameters);
    }
    var classData_@(ViewBag.Key);
    function classDataLoaded_@(ViewBag.Key)(error, data) {
        data = JSON.parse(data);
        classData_@(ViewBag.Key) = {};
        for (var obj in data) {
            var dt = data[obj].FromDate.substr(0, 10);
            var parser = d3.timeParse("%Y-%m-%d");
            dt = parser(dt);

            if (!classData_@(ViewBag.Key)[dt])
                classData_@(ViewBag.Key)[dt] = [];
            classData_@(ViewBag.Key)[dt].push(data[obj]);

            var focusLine = _g__@(ViewBag.Key).append("line")
                .attr("x1", x_@(ViewBag.Key)(dt))
                .attr("y1", 0)
                .attr("x2", x_@(ViewBag.Key)(dt))
                .attr("y2", height_@(ViewBag.Key))
                .style("stroke-width", 1)
                .style("stroke", "blue")
                .style("stroke-dasharray", "10,10")
                .style("fill", "none");
            //.append("title").text("This is a blue line")
            //.on("mouseover", function () { alert('a'); console.log(data[obj].Id); })

        }
    }

    function highlightLine_@(ViewBag.Key)(key) {
        $("#svg_@(ViewBag.Key) path[data-category='" + key + "']").css("stroke-width", "3px");
        $("#svg_@(ViewBag.Key) path[data-category!='" + key + "']").css("stroke-width", "0.5px");
    }
    function highlightLineClear_@(ViewBag.Key)() {
        $("#svg_@(ViewBag.Key) path[data-category!='']").css("stroke-width", "");
    }


</script>

@*@if(ViewBag.IsStandalone)
{
    Html.RenderPartial("~/Views/Shared/_PartialPage_FilterCourseInstance.cshtml");
    Html.RenderPartial("~/Views/Shared/_PartialPage_FilterStudent.cshtml");
    Html.RenderPartial("~/Views/Shared/_PartialPage_FilterProgramme.cshtml");
}*@


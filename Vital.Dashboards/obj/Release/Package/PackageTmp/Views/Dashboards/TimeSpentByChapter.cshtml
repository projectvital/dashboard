@{
    ViewBag.Title = "TimeSpentByChapter";
    ViewBag.RequireD3 = true;
    ViewBag.InstanceId = Guid.NewGuid().ToString().Replace("-", "");
    ViewBag.Key = ViewBag.Title + "_" + ViewBag.InstanceId;

    ViewBag.Width = (this.Model != null && this.Model.ContainsKey("width")) ? this.Model["width"] : 960;
    ViewBag.Height = (this.Model != null && this.Model.ContainsKey("height")) ? this.Model["height"] : 500;
    ViewBag.IsStandalone = (this.Model == null);
}


@if (ViewBag.IsStandalone)
{
    Html.RenderPartial("~/Views/Shared/_PartialPage_GlobalRebuildScript.cshtml");
    
    @*<div class="block-container filter">
        <select id="x_courseInstanceSelect"></select>
        <select id="x_studentSelect"></select>
    </div>
    <br />*@
}

<div class="@((ViewBag.IsStandalone)?"block-container": "") ">
    <svg id="svg_@(ViewBag.Key)" width="@ViewBag.Width" height="@ViewBag.Height"></svg>
    <div id="legend_@(ViewBag.Key)"></div>
</div>

<style>
    .caption {
        font-size: 0.75em;
        font-weight: bold;
    }
</style>


<script>
    var svg_@(ViewBag.Key) = d3.select("#svg_@(ViewBag.Key)"),
    margin_@(ViewBag.Key) = { top: 20, right: 20, bottom: 35, left: 40 },
    width_@(ViewBag.Key) = +svg_@(ViewBag.Key).attr("width") - margin_@(ViewBag.Key).left - margin_@(ViewBag.Key).right,
    height_@(ViewBag.Key) = +svg_@(ViewBag.Key).attr("height") - margin_@(ViewBag.Key).top - margin_@(ViewBag.Key).bottom,
    g_@(ViewBag.Key) = svg_@(ViewBag.Key).append("g").attr("transform", "translate(" + margin_@(ViewBag.Key).left + "," + margin_@(ViewBag.Key).top + ")");


    var x0_@(ViewBag.Key) = d3.scaleBand()
        .rangeRound([0, width_@(ViewBag.Key)])
        .paddingInner(0.1);

    var x1_@(ViewBag.Key) = d3.scaleBand()
        .padding(0.05);

    var y_@(ViewBag.Key) = d3.scaleLinear()//scaleLinear()
        .rangeRound([height_@(ViewBag.Key), 0]);

@*    var z_@(ViewBag.Key) = d3.scaleOrdinal()
        .range(["#90aeef", "#8a89a6", "#ffbb69", "#ffd2b6", "#98abc5", "#7b6888", "#6b486b", "#a05d56"]);
    var zb_@(ViewBag.Key) = d3.scaleOrdinal()
        .range(["#0040ca", "#181484", "#ff8c00", "#d0743c", "#0f5bc3", "#7b6888", "#6b486b", "#a05d56"]);
    *@
    var z_@(ViewBag.Key)  = d3.scaleOrdinal().range(["#7FC97F", "#386CB0"]);
    var zb_@(ViewBag.Key) = d3.scaleOrdinal().range(["#7FC97F", "#386CB0"]);


    //buildChart_@(ViewBag.Key)();
    GlobalRebuildFunctions.push(buildChart_@(ViewBag.Key));

    //function rebuildCharts() {
    //    buildChart();
    //}
    function buildChart_@(ViewBag.Key)() {
        InsertLoadingIndication(g_@(ViewBag.Key));

        var jsonData = {};
        //jsonData["timeblock"] = 10;
        jsonData["courseinstanceid"] = GetSelectedCourseInstance(); //"@(ViewBag.CourseInstanceId)";
        AddDataFilterFromCombo("#x_studentSelect", "logagentid", jsonData);
        AddDataFilterFromCombo("#x_programmeSelect", "programmeid", jsonData);
        //AddDataFilterFromCombo("#x_verbSelect", "logverbid", jsonData);

        GetCsvChartData("@ViewBag.ApiUrl/v1/ChartData/TimeSpentByChapter", type_@(ViewBag.Key), callback_@(ViewBag.Key), jsonData/*"a=2&b=3"*/);
    }

    function type_@(ViewBag.Key)(d, i, columns) {
        for (var i = 1, n = columns.length; i < n; ++i) d[columns[i]] = +d[columns[i]];

        d.duration = d.duration / 60 / 60;//seconds -> hours
        d.duration_avg = d.duration_avg / 60 / 60//

        return d;
    }

    function callback_@(ViewBag.Key)(error, data) {
        if (error) throw error;

        g_@(ViewBag.Key).selectAll("g").remove();//Clear old chart
        var groot = g_@(ViewBag.Key).append("g");

        var keys = data.columns.slice(1);

        x0_@(ViewBag.Key).domain(data.map(function (d) { return d.chapter; }));
        x1_@(ViewBag.Key).domain(keys).rangeRound([0, x0_@(ViewBag.Key).bandwidth()]);
        y_@(ViewBag.Key).domain([0, d3.max(data, function (d) { return d3.max(keys, function (key) { return d[key]; }); })]).nice();

        var node = groot.append("g")
            .selectAll("g")
            .data(data)
            .enter().append("g")
            .attr("transform", function (d) { return "translate(" + x0_@(ViewBag.Key)(d.chapter) + ",0)"; });
        node.selectAll("rect")
            .data(function (d) { return keys.map(function (key) { return { key: key, value: d[key] }; }); })
            .enter().append("rect")
            .attr("x", function (d) { return x1_@(ViewBag.Key)(d.key); })//use for 3 column view
            //.attr("x", function (d) { return x1("total"); })//use for 1 column view
            .attr("y", function (d) { return y_@(ViewBag.Key)(d.value); })
            //.attr("width", x1.bandwidth() * 3)//use for 1 column view
            .attr("width", x1_@(ViewBag.Key).bandwidth())//use for 3 column view
            .attr("height", function (d) { return height_@(ViewBag.Key) - y_@(ViewBag.Key)(d.value); })
            .attr("fill", function (d) { return z_@(ViewBag.Key)(d.key); })
            .attr("fill-opacity", function (d) { if (d.key == "groupcount") return 0.25; else return 1; })
            .attr("style", function (d) { return "stroke-width: 1; stroke: " + zb_@(ViewBag.Key)(d.key); });

        node.append("text")
            .attr("dy", "1em")
            .attr("y", function (d) { return (y_@(ViewBag.Key)(d.duration)) - 15; })
            .attr("x", function (d) { return x1_@(ViewBag.Key).bandwidth() / 2; })
            .attr("text-anchor", "middle")
            .attr("class", "caption")
            .text(function (d) {
                var res = "";
                if (d.duration > 24)
                    res = Math.floor(d.duration / 24) + "d ";
                res += padWithZeroes(Math.floor(d.duration % 24), 2) + ":" + padWithZeroes(Math.floor(d.duration * 60 % 60), 2) + "";
                return res;
            });

        node.append("text")
        .attr("dy", "1em")
        .attr("y", function (d) { return (y_@(ViewBag.Key)(d.duration_avg)) - 15; })
        .attr("x", function (d) { return x1_@(ViewBag.Key).bandwidth() / 2 * 3; })
        .attr("text-anchor", "middle")
        .attr("class", "caption")
        .text(function (d) {
            var res = "";
            if (d.duration_avg > 24)
                res = Math.floor(d.duration_avg / 24) + "d ";
            res += padWithZeroes(Math.floor(d.duration_avg % 24), 2) + ":" + padWithZeroes(Math.floor(d.duration_avg * 60 % 60), 2) + "";
            return res;
        });

        //node.append("text")
        //    .attr("dy", ".75em")
        //    .attr("y", function (d) { return (y(d.groupcount)) - 15; })
        //    .attr("x", function (d) { return x1.bandwidth() / 2 * 3; })
        //    .attr("text-anchor", "middle")
        //    .text(function (d) {
        //        return /*formatCount*/(+d.groupcount) + " / " + d.total;
        //    });

        yaxis = groot.append("g")
            .attr("class", "axis")
            .attr("transform", "translate(0," + height_@(ViewBag.Key) + ")")
            .call(d3.axisBottom(x0_@(ViewBag.Key)));

        yaxis.selectAll("text")
            .attr("dx", "0em")
            .attr("dy", "1em")
            .attr("transform", "rotate(-6)")


        yaxis.append("text")
            .attr("x", width_@(ViewBag.Key) / 2)
            .attr("y", 30)
            .attr("dy", "0.32em")
            .attr("fill", "#000")
            .attr("font-weight", "bold")
            .attr("text-anchor", "start")
            .text("Chapter");

        groot.append("g")
            .attr("class", "axis")
            .call(d3.axisLeft(y_@(ViewBag.Key)))
            .append("text")
            .attr("x", 2)
            .attr("y", y_@(ViewBag.Key)(y_@(ViewBag.Key).ticks().pop()) + 0.5)
            .attr("dy", "0.32em")
            .attr("fill", "#000")
            .attr("font-weight", "bold")
            .attr("text-anchor", "start")
            .text("Time spent (h)")


        d3.select("#legend_@(ViewBag.Key)").selectAll("div").remove();//Clear old legend

        var legend = d3.select("#legend_@(ViewBag.Key)")
           .attr("class", "legend")
           .selectAll("div")
           .data(keys.slice().reverse())
           .enter().append("div")
           .attr("class", "legendBlock");

        legend.append("div")
            .attr("class", "color")
            .style("background-color", z_@(ViewBag.Key))
            .style("border-color", zb_@(ViewBag.Key))
            .style("border-width", "1px")
            .style("border-style", "solid");

        var total_duration = d3.sum(data, function (d) { return d["duration"] });
        var total_duration_avg = d3.sum(data, function (d) { return d["duration_avg"] });

        legend.append("div")
            .attr("class", "text")
            .text(function (d) {
                if (d == "duration")
                    return "Time spent (total = " + convertTimestampToDurationString_@(ViewBag.Key)(total_duration) + ")";
                else if (d == "duration_avg")
                    return "Average time spent (total = " + convertTimestampToDurationString_@(ViewBag.Key)(total_duration_avg) + ")";
                else
                    return "";
            });

        @*var legend = groot.append("g")
            .attr("font-family", "sans-serif")
            .attr("font-size", 10)
            .attr("text-anchor", "end")
            .selectAll("g")
            .data(keys.slice().reverse())
            .enter().append("g")
            .attr("transform", function (d, i) { return "translate(0," + i * 20 + ")"; });

        legend.append("rect")
            .attr("x", width_@(ViewBag.Key) - 19)
            .attr("width", 19)
            .attr("height", 19)
            .attr("fill", z_@(ViewBag.Key))
            .attr("stroke", zb_@(ViewBag.Key))
            .attr("stroke-width", 1);

        legend.append("text")
            .attr("x", width_@(ViewBag.Key) - 24)
            .attr("y", 9.5)
            .attr("dy", "0.32em")
            .text(function (d) {
                if (d == "duration")
                    return "Time spent";
                else if (d == "duration_avg")
                    return "Average time spent";
                else
                    return "";
            });*@
    }

    function convertTimestampToDurationString_@(ViewBag.Key)(value) {
        var res = "";
        if (value > 24)
            res = Math.floor(value / 24) + "d ";
        res += padWithZeroes(Math.floor(value % 24), 2) + ":" + padWithZeroes(Math.floor(value * 60 % 60), 2) + "";
        return res;
    }
</script>


@*@if (ViewBag.IsStandalone)
{
    Html.RenderPartial("~/Views/Shared/_PartialPage_FilterCourseInstance.cshtml");
    Html.RenderPartial("~/Views/Shared/_PartialPage_FilterStudent.cshtml");
}*@





